searchState.loadedDescShard("threading", 0, "Returns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShort hand for std::sync::mpsc::Receiver::iter\nCreates a new pair of inter-connected channels\nShort hand for std::sync::mpsc::Receiver::recv\nShort hand for std::sync::mpsc::Receiver::recv_timeout\nShort hand for std::sync::mpsc::Sender::send\nShort hand for std::sync::mpsc::Receiver::try_iter\nShort hand for std::sync::mpsc::Receiver::try_recv\nWaits for a specific message of type R to be received.\nWaits for a specific message of type R to be received or …\nThe future has completed execution successfully.\nThe future has not yet been picked up by a worker.\nA representation of a value that may not be available yet, …\nRepresents the possible states of a <code>Future</code>.\nThe future has encountered a panic during execution.\nThe future is currently being executed by a worker.\nA thread pool that manages a set of worker threads to …\nReturns the number of not yet exectued tasks in the pool.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the future has completed execution (either done …\nCreates a new <code>ThreadPool</code> with the specified number of …\nRetrieves the output of the future.\nSubmits a closure to be executed by a worker thread and …\nRetrieves the current FutureState.\nWaits for the future to complete execution.")